# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import *
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel
from PyQt5.QtMultimedia import *
from PyQt5.QtMultimediaWidgets import *
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap, QImage
from PyQt5.QtCore import QTimer, QDateTime
import cv2
import pytesseract



import sys
import os
import time
from datetime import datetime


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("ANPR")
        MainWindow.resize(1280, 720)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        #big camera screen
        self.maininput = QCameraViewfinder(self.centralwidget)
        self.maininput.show()
        self.maininput.setGeometry(QtCore.QRect(0, 0, 1081, 521))
        #self.maininput.setFrameShape(QtWidgets.QFrame.Box)
        #self.maininput.setFrameShadow(QtWidgets.QFrame.Raised)
        #self.maininput.setLineWidth(3)
        #self.maininput.setText("")
        self.maininput.setObjectName("maininput")
        #cpu and gpu stats
        self.Stats = QtWidgets.QTextBrowser(self.centralwidget)
        self.Stats.setGeometry(QtCore.QRect(1085, 0, 191, 521))
        self.Stats.setObjectName("Stats")
        #cropped image of the license plate
        self.licenseplate = QtWidgets.QLabel(self.centralwidget)
        self.licenseplate.setScaledContents(True)
        self.licenseplate.setGeometry(QtCore.QRect(0, 530, 241, 141))
        self.licenseplate.setText("")
        self.licenseplate.setObjectName("licenseplate")
        #function result (license plate and database result)
        self.programresult = QtWidgets.QTextBrowser(self.centralwidget)
        self.programresult.setGeometry(QtCore.QRect(250, 530, 831, 141))
        self.programresult.setObjectName("programresult")
        #Video input port
        self.VideoInput = QtWidgets.QComboBox(self.centralwidget)
        self.VideoInput.setGeometry(QtCore.QRect(1090, 530, 181, 22))
        self.VideoInput.setObjectName("VideoInput")
        #Program run time
        self.Runtime = QtWidgets.QTextBrowser(self.centralwidget)
        self.Runtime.setGeometry(QtCore.QRect(1090, 560, 181, 41))
        self.Runtime.setObjectName("Runtime")
        #Reset the program
        self.Reset = QtWidgets.QPushButton(self.centralwidget)
        self.Reset.setGeometry(QtCore.QRect(1090, 610, 91, 61))
        self.Reset.setObjectName("Reset")
        #stop the program
        self.Stop = QtWidgets.QPushButton(self.centralwidget)
        self.Stop.setGeometry(QtCore.QRect(1180, 610, 91, 61))
        self.Stop.setObjectName("Stop")
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1280, 21))
        self.menubar.setObjectName("menubar")

        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")

        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Reset.setText(_translate("MainWindow", "Reset"))
        self.Stop.setText(_translate("MainWindow", "Stop"))

        #cameraselector and connecting the camera
        self.Stop.clicked.connect(self.stopprog)
        self.available_cameras = QCameraInfo.availableCameras()
        self.VideoInput.setStatusTip('Choose camera to start video translation')
        self.VideoInput.setToolTip("Select camera")
        self.VideoInput.setToolTipDuration(2500)
        self.VideoInput.addItems([camera.description() for camera in self.available_cameras])
        self.VideoInput.currentIndexChanged.connect(self.select_camera)

        #start the timer when reset is pressed
        self.Reset.clicked.connect(self.start_timer)
        
        #screenshot every n seconds
        self.timer = QTimer()
        self.timer.timeout.connect(self.capture_screenshot)


    def start_timer(self):
        self.timer.start(5000)

    def capture_screenshot(self):
        self.capture = QCameraImageCapture(self.camera)

        #saving it to specific directory
        current_datetime = QDateTime.currentDateTime().toString("yyyyMMdd_hhmmss")
        filename = f"screenshot_{current_datetime}.jpg"

        directory = "D:\ANPR\screenshots"

        filepath = os.path.join(directory, filename)
        self.capture.capture(filepath)

        
        license_plate = self.perform_ocr(filepath)

        if license_plate is not None:
            self.programresult.setText(license_plate)

    def perform_ocr(self, img_path):
        image = cv2.imread(img_path)
        grayscale = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        license_plate = pytesseract.image_to_string(grayscale)
        return license_plate

    def select_camera(self, i):
        self.camera = QCamera(self.available_cameras[i])
        self.camera.setViewfinder(self.maininput)
        self.camera.setCaptureMode(QCamera.CaptureStillImage)
        self.camera.start()

    def stopprog(self):
        exit()

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
